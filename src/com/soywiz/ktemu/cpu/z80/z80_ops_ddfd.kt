package com.soywiz.ktemu.cpu.z80

import com.soywiz.ktemu.common.noImpl

fun Z80State.execOneDDFD(op: Int, kind: Boolean) {
	regkind = kind

	when (op) {
		0x09 -> noImpl("ADD REGISTER,BC")
		0x19 -> noImpl("ADD REGISTER,DE")
		0x21 -> IXY = LD(nnnn, 4 + 6)
		0x22 -> noImpl("LD (nnnn),REGISTER")
		0x23 -> noImpl("INC REGISTER")
		0x24 -> noImpl("INC REGISTERH")
		0x25 -> noImpl("DEC REGISTERH")
		0x26 -> noImpl("LD REGISTERH,nn")
		0x29 -> noImpl("ADD REGISTER,REGISTER")
		0x2a -> noImpl("LD REGISTER,(nnnn)")
		0x2b -> noImpl("DEC REGISTER")
		0x2c -> noImpl("INC REGISTERL")
		0x2d -> noImpl("DEC REGISTERL")
		0x2e -> noImpl("LD REGISTERL,nn")
		0x34 -> noImpl("INC (REGISTER+dd)")
		0x35 -> noImpl("DEC (REGISTER+dd)")
		0x36 -> noImpl("LD (REGISTER+dd),nn")
		0x39 -> noImpl("ADD REGISTER,SP")
		0x44 -> noImpl("LD B,REGISTERH")
		0x45 -> noImpl("LD B,REGISTERL")
		0x46 -> noImpl("LD B,(REGISTER+dd)")
		0x4c -> noImpl("LD C,REGISTERH")
		0x4d -> noImpl("LD C,REGISTERL")
		0x4e -> noImpl("LD C,(REGISTER+dd)")
		0x54 -> noImpl("LD D,REGISTERH")
		0x55 -> noImpl("LD D,REGISTERL")
		0x56 -> noImpl("LD D,(REGISTER+dd)")
		// 0x56 -> D = READ8((IXY + offset) and 0xFFFF, 11)
		0x5c -> noImpl("LD E,REGISTERH")
		0x5d -> noImpl("LD E,REGISTERL")
		0x5e -> noImpl("LD E,(REGISTER+dd)")
		0x60 -> noImpl("LD REGISTERH,B")
		0x61 -> noImpl("LD REGISTERH,C")
		0x62 -> noImpl("LD REGISTERH,D")
		0x63 -> noImpl("LD REGISTERH,E")
		0x64 -> noImpl("LD REGISTERH,REGISTERH")
		0x65 -> noImpl("LD REGISTERH,REGISTERL")
		0x66 -> noImpl("LD H,(REGISTER+dd)")
		0x67 -> noImpl("LD REGISTERH,A")
		0x68 -> noImpl("LD REGISTERL,B")
		0x69 -> noImpl("LD REGISTERL,C")
		0x6a -> noImpl("LD REGISTERL,D")
		0x6b -> noImpl("LD REGISTERL,E")
		0x6c -> noImpl("LD REGISTERL,REGISTERH")
		0x6d -> noImpl("LD REGISTERL,REGISTERL")
		0x6e -> noImpl("LD L,(REGISTER+dd)")
		0x6f -> noImpl("LD REGISTERL,A")
		0x70 -> noImpl("LD (REGISTER+dd),B")
		0x71 -> noImpl("LD (REGISTER+dd),C")
		0x72 -> noImpl("LD (REGISTER+dd),D")
		0x73 -> noImpl("LD (REGISTER+dd),E")
		0x74 -> noImpl("LD (REGISTER+dd),H")
		0x75 -> noImpl("LD (REGISTER+dd),L")
		0x77 -> noImpl("LD (REGISTER+dd),A")
		0x7c -> noImpl("LD A,REGISTERH")
		0x7d -> noImpl("LD A,REGISTERL")
		0x7e -> noImpl("LD A,(REGISTER+dd)")
		0x84 -> noImpl("ADD A,REGISTERH")
		0x85 -> noImpl("ADD A,REGISTERL")
		0x86 -> noImpl("ADD A,(REGISTER+dd)")
		0x8c -> noImpl("ADC A,REGISTERH")
		0x8d -> noImpl("ADC A,REGISTERL")
		0x8e -> noImpl("ADC A,(REGISTER+dd)")
		0x94 -> noImpl("SUB A,REGISTERH")
		0x95 -> noImpl("SUB A,REGISTERL")
		0x96 -> noImpl("SUB A,(REGISTER+dd)")
		0x9c -> noImpl("SBC A,REGISTERH")
		0x9d -> noImpl("SBC A,REGISTERL")
		0x9e -> noImpl("SBC A,(REGISTER+dd)")
		0xa4 -> noImpl("AND A,REGISTERH")
		0xa5 -> noImpl("AND A,REGISTERL")
		0xa6 -> noImpl("AND A,(REGISTER+dd)")
		0xac -> noImpl("XOR A,REGISTERH")
		0xad -> noImpl("XOR A,REGISTERL")
		0xae -> noImpl("XOR A,(REGISTER+dd)")
		0xb4 -> noImpl("OR A,REGISTERH")
		0xb5 -> noImpl("OR A,REGISTERL")
		0xb6 -> noImpl("OR A,(REGISTER+dd)")
		0xbc -> noImpl("CP A,REGISTERH")
		0xbd -> noImpl("CP A,REGISTERL")
		0xbe -> noImpl("CP A,(REGISTER+dd)")
		0xcb -> {
			//tstates += 4 + 7
			val tempaddr = IXY + offset
			val opcode = nn
			this.execOneDDFD_CB(opcode, tempaddr, kind)
		}
		0xe1 -> noImpl("POP REGISTER")
		0xe3 -> noImpl("EX (SP),REGISTER")
		0xe5 -> PUSH16(IXY, 4+1+6) // PUSH REGISTER
		0xe9 -> noImpl("JP REGISTER")
		0xf9 -> noImpl("LD SP,REGISTER")
	}
}
